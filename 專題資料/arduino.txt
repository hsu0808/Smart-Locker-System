#include <LiquidCrystal_PCF8574.h>
#include <SoftwareSerial.h>
#include <Wire.h>
#include "DHT.h"

#define DHTPIN 2
#define DHTTYPE DHT11

LiquidCrystal_PCF8574 lcd(0x27);

DHT dht(DHTPIN, DHTTYPE);

//載入rfid
#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN 9
#define RST_PIN 10

MFRC522 mfrc522(SS_PIN, RST_PIN);   // 建立 MFRC522.

//鍵盤函式庫
#include "Adafruit_Keypad.h"

const byte ROWS = 4; // 列數(橫的)
const byte COLS = 4; // 行數(直的)

//鍵盤上每一個按鍵的名稱
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {36, 34, 32, 30}; //定義列的腳位
byte colPins[COLS] = {28, 26, 24, 22}; //定義行的腳位

//初始化鍵盤
Adafruit_Keypad customKeypad = Adafruit_Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS);
int buzzer = 7;
int lock = 5;
SoftwareSerial BT(12, 11);
void setup() {
  BT.begin(9600);
  Serial.begin(9600);

  customKeypad.begin();//初始化鍵盤
  dht.begin();  //初始化DHT
  lcd.begin(16, 2); // 初始化  lcd
  SPI.begin(); // 設定  SPI bus
  mfrc522.PCD_Init();   // 設定 MFRC522

  Serial.println("KeyPad+LCD+DHT11+RFID test");
  pinMode(buzzer, OUTPUT);
  pinMode(lock, OUTPUT);
  digitalWrite(lock, HIGH);


}
//宣告固定密碼
String ans = "1111";

int n = 0; //儲存字串長度

String passw = "";//儲存輸入字串

int finish = 0;//用來判斷結束與否
int passWrong = 0;

void loop() {
  lcd.setBacklight(255);
  lcd.home();

  float h = dht.readHumidity();   //取得濕度
  float t = dht.readTemperature();  //取得溫度C

  ////bluetooh
  byte cmd[20];
  int strsize;
  //確定藍芽是否接收到位元
  if ((strsize = (BT.available())) > 0) {
    for (int i = 0; i < strsize; i++) {
      cmd[i] = char(BT.read());
    }
  }
  //溫溼度資料傳送
  if (cmd[0] == 'c') {
    char hum_buf[10], tem_buf[10];
    if (!isnan(h) && !isnan(t)) {
      dtostrf(h, 3, 2, hum_buf);
      dtostrf(t, 3, 2, tem_buf);
      for (int i = 0; i < 5; i++) {
        BT.write(hum_buf[i]);
      }
      for (int i = 0; i < 5; i++) {
        BT.write(tem_buf[i]);
      }

      if (passWrong == 1) {
        BT.write("1");
        passWrong = 0;
      } else {
        BT.write("0");
      }

      char remberPass[4];
      ans.toCharArray(remberPass, 5);
      for (int i = 0; i < 4; i++) {
        BT.write(remberPass[i]);
      }
    }
    cmd[0] = 'd';
  }

  ////


  // 開始偵測使用者的按鍵狀態
  customKeypad.tick();

  //判斷按了哪一個鍵
  while (customKeypad.available()) {
    if (finish == 0) {
      if (n < 4) {
        keypadEvent e = customKeypad.read();
        if (e.bit.EVENT == KEY_JUST_PRESSED) {
          char now = (char)e.bit.KEY;
          passw += now;
          Serial.print(now);

          //印出目前輸入的字元
          lcd.setCursor(0 + n, 0);
          lcd.print(now);

        }
        else if (e.bit.EVENT == KEY_JUST_RELEASED) n++;
      }
    }
    else {
        keypadEvent e = customKeypad.read();
        if(e.bit.EVENT == KEY_JUST_PRESSED){
          Serial.print((char)e.bit.KEY);
            if((char)e.bit.KEY == '*'){
              finish = 0;
              lcd.clear();
              lcd.setCursor(0, 0);
              lcd.print("lock");          
              digitalWrite(lock, HIGH);
              delay(1000);
              lcd.clear();
              lcd.setCursor(0, 0);
              n=-1;
            }
        }
    }
  }

  String content = "";
  byte letter;
  if (n == 0) {
    if ( ! mfrc522.PICC_IsNewCardPresent())
    {
      return;
    }
    if ( ! mfrc522.PICC_ReadCardSerial())
    {
      return;
    }

    //Show UID on serial monitor
    Serial.print("Card No. :");

    for (byte i = 0; i < mfrc522.uid.size; i++)
    {
      Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
      Serial.print(mfrc522.uid.uidByte[i], HEX);
      content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
      content.concat(String(mfrc522.uid.uidByte[i], HEX));
    }
    Serial.println();
    Serial.print(" Message : ");
    content.toUpperCase();
  }
  //判斷輸入密碼是否與預設字串相同
  if (n == 4 && finish == 0 && ans.equals(passw))
  {

    Serial.println("success");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("success");
    lcd.setCursor(0, 1);
    lcd.print("RH:");
    Serial.print(h);
    Serial.print(t);
    lcd.print(h);
    lcd.setCursor(9, 1);
    lcd.print("T:");
    lcd.print(t);
    finish = 1;
    digitalWrite(lock, LOW);

    delay(3000);
    lcd.clear();
    lcd.setCursor(0, 0);
    passw="";
    n=0;
  }
  //判斷RFID卡號是否正確
  else if (content.substring(1) == "83 43 29 1A" || content.substring(1) == "3B 35 60 1B")
  {
    Serial.println("success");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("success");
    lcd.setCursor(0, 1);
    lcd.print("RH:");
    Serial.print(h);
    Serial.print(t);
    lcd.print(h);
    lcd.setCursor(9, 1);
    lcd.print("T:");
    lcd.print(t);
    finish = 1;

    digitalWrite(lock, LOW);

    delay(3000);
    lcd.clear();
    lcd.setCursor(0, 0);
    passw="";
    n=0;
  }
  //判斷密碼或RFID是否輸入錯誤
  
 
  else if (finish == 0 && (n == 4 || content != "" )) { 
    Serial.println("failed");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("failed");
    digitalWrite(buzzer, HIGH);
    delay(1000);
    digitalWrite(buzzer, LOW);
    delay(1000);

    //digitalWrite(lock,LOW);

    passWrong = 1;

    n = 0; //初始化字串長度
    passw = ""; //初始化字串
    //delay(100);
    lcd.clear();

  }

  //delay(100);
}